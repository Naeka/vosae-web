require 'store/serializer'
require 'store/adapter'

# This allows ember-data to return all objects 
# or subclasses of the model Class when calling
# DS.Model.all()

DS.RecordArrayManager.reopen
  updateRecordArrays: () ->
    Ember.EnumerableUtils.forEach @changedReferences, ((reference) =>
      type = reference.type
      superclass = type.superclass
      recordArrays = @filteredRecordArrays.get(type)
      filter = undefined

      recordArrays.forEach (array) =>
        filter = Ember.get(array, "filterFunction")
        @updateRecordArray array, filter, type, reference

      if DS.Model.detect(superclass)
        recordArrays = @filteredRecordArrays.get(superclass)
        recordArrays.forEach (array) =>
          filter = Ember.get(array, 'filterFunction')
          @updateRecordArray array, filter, superclass, reference
      
      # loop through all manyArrays containing an unloaded copy of this
      # clientId and notify them that the record was loaded.
      manyArrays = reference.loadingRecordArrays
      if manyArrays
        i = 0
        l = manyArrays.length

        while i < l
          manyArrays[i].loadedRecord()
          i++
        reference.loadingRecordArrays = []
    ), this

    @changedReferences = []


# Main app store

Vosae.Store = DS.Store.extend
  adapter: Vosae.Adapter.create()

# These register adapter is mainly used to transform
# the json[`specific_permissions`] returned by the API
# into something useable by ember-data.

Vosae.Store.registerAdapter 'Vosae.User', Vosae.Adapter.extend
  serializer: Vosae.UserSerializer.create()

# As long as `supportedCurrencies` and `defaultCurrency` are not part of
# the `<Vosae.Tenant>` model, but are required by the API for creation, 
# This adapter add thoses properties to the `<Vosae.Tenant>` before POST.

Vosae.Store.registerAdapter 'Vosae.Tenant', Vosae.Adapter.extend
  createRecord: (store, type, record) ->
    json = {}
    root = @rootForType(type)
    data = record.serialize()
    adapter = this

    # Dirty but no other solution right now...
    controller = Vosae.lookup('controller:tenants.add')
    
    # Add `supportedCurrencies` and `defaultCurrency` to data
    supportedCurrencies = controller.getSupportedCurrenciesResourceURI()
    defaultCurrency = controller.getDefaultCurrencyResourceURI()
    data['supported_currencies'] = supportedCurrencies
    data['default_currency'] = defaultCurrency

    @ajax(@buildURL(root), "POST",
      data: data
    ).then((pre_json) ->
      json[root] = pre_json
      Ember.run @, ->
        adapter.didCreateRecord store, type, record, json
    , (xhr) ->
      adapter.didError store, type, record, xhr
    ).then null, adapter.rejectionHandler

# This register adapter is mainly used to fetch the tenantSettings
# on the API. `api/v1/tenant_settings` is a specific end point that
# always returns the authenticated tenant 

Vosae.Store.registerAdapter 'Vosae.TenantSettings', Vosae.Adapter.extend
  find: (store, type, id) ->
    id = 1 # IMPORTANT !!!
    json = {}
    root = @rootForType(type)
    adapter = this
    @ajax(@buildURL(root), "GET").then((pre_json) ->
        # Transforms key 'objects' from JSON by type
        # Example for model Contact json['objects'] -> json['contact']
      json[root] = pre_json
      adapter.didFindRecord store, type, json, id
    ).then null, adapter.rejectionHandler

  updateRecord: (store, type, record) ->
    json = {}
    root = @rootForType(type)
    adapter = this
    data = @serialize(record)

    @ajax(@buildURL(root), "PUT",
      data: data
    ).then((pre_json) ->
      json[root] = pre_json
      adapter.didUpdateRecord store, type, record, json
    , (xhr) ->
      adapter.didError store, type, record, xhr
      throw xhr
    ).then null, adapter.rejectionHandler

# Theses register adapters are used because we need to
# keep a track of the query generated by the controller. 
# This way we can bind meta and query and create pagination

Vosae.Store.registerAdapter 'Vosae.Invoice', Vosae.Adapter.extend
  serializer: Vosae.InvoiceBaseSerializer.create()

  findQuery: (store, type, query, recordArray) ->
    console.log(type)
    json = {}
    root = @rootForType(type)
    plural = @pluralize(root)
    data = if query.string then query.string else query
    adapter = this
    
    @ajax(@buildURL(root), "GET",
      data: data
    ).then((pre_json) ->
      json['meta'] = pre_json['meta']
      json[plural] = pre_json['objects']
      if json.meta and query.name
        adapter.storeMetaData json.meta, type, query.name
      adapter.didFindQuery store, type, json, recordArray
    ).then null, adapter.rejectionHandler

Vosae.Store.registerAdapter 'Vosae.Quotation', Vosae.Adapter.extend
  serializer: Vosae.InvoiceBaseSerializer.create()

  findQuery: (store, type, query, recordArray) ->
    json = {}
    root = @rootForType(type)
    plural = @pluralize(root)
    data = if query.string then query.string else query
    adapter = this
    
    @ajax(@buildURL(root), "GET",
      data: data
    ).then((pre_json) ->
      json['meta'] = pre_json['meta']
      json[plural] = pre_json['objects']
      if json.meta and query.name
        adapter.storeMetaData json.meta, type, query.name
      adapter.didFindQuery store, type, json, recordArray
    ).then null, adapter.rejectionHandler

# As long as <Vosae.CreditNote> extend the model <Vosae.InvoiceBase>
# we need to use the InvoiceBaseSerializer

Vosae.Store.registerAdapter 'Vosae.CreditNote', Vosae.Adapter.extend
  serializer: Vosae.InvoiceBaseSerializer.create()

# <Vosae.Payment> is a polymorphic model, this way, when POST on
# /payment/ we need to add "type=invoice_payment" to the contentType
# property in the ajax hash object.

Vosae.Store.registerAdapter 'Vosae.Payment', Vosae.Adapter.extend
  ajax: (url, type, hash) ->
    adapter = this
    new Ember.RSVP.Promise((resolve, reject) ->
      hash = hash or {}
      hash.url = url
      hash.type = type
      hash.dataType = "json"
      hash.context = adapter

      if hash.data and type isnt "GET"
        hash.contentType = "application/json; charset=utf-8; type=invoice_payment;"
        hash.data = JSON.stringify(hash.data)

      hash.success = (json) ->
        Ember.run null, resolve, json

      hash.error = (jqXHR, textStatus, errorThrown) ->
        Ember.run null, reject, jqXHR

      Ember.$.ajax hash
    )

# Custom adapters have been defined, we can instantiate or main store
Vosae.Store.create()